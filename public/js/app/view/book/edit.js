// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  define(['jquery', 'moustache', 'backbone', 'app/util/form_serializer', 'app/model/book', 'text!/../../templates/book/edit.html'], function($, Moustache, Backbone, Serializer, Book, EditTemplate) {
    var EditView, initialize;
    EditView = (function(_super) {
      __extends(EditView, _super);

      function EditView(_at_router) {
        this.router = _at_router;
        EditView.__super__.constructor.apply(this, arguments);
      }

      EditView.prototype.el = $("#books");

      EditView.prototype.render = function(options) {
        if (options.id) {
          this.book = new Book({
            id: options.id
          });
          return this.book.fetch({
            success: (function(_this) {
              return function(model) {
                var rendered;
                rendered = Moustache.render(EditTemplate, model.toJSON());
                return _this.$el.html(rendered);
              };
            })(this)
          });
        } else {
          return this.$el.html(Moustache.render(EditTemplate, {}));
        }
      };

      EditView.prototype.events = {
        'submit .edit-book-form': 'saveBook',
        'click .delete': 'deleteBook'
      };

      EditView.prototype.saveBook = function(event) {
        var bookDetails;
        bookDetails = $(event.currentTarget).serializeForm();
        this.book = new Book;
        this.book.save(bookDetails, {
          success: (function(_this) {
            return function(book) {
              return _this.router.navigate('', {
                trigger: true
              });
            };
          })(this)
        });
        return false;
      };

      EditView.prototype.deleteBook = function(event) {
        var answer;
        answer = confirm("Are you sure you want to delete this book ?");
        if (answer) {
          console.log(this.book.toJSON());
          this.book.destroy({
            request: (function(_this) {
              return function() {
                return console.log("start delete");
              };
            })(this),
            sync: (function(_this) {
              return function() {
                return console.log("finish event");
              };
            })(this),
            success: (function(_this) {
              return function() {
                console.log("delete success");
                return _this.router.navigate('', {
                  trigger: true
                });
              };
            })(this)
          });
          return false;
        }
      };

      return EditView;

    })(Backbone.View);
    initialize = function(router) {
      var editView;
      return editView = new EditView(router);
    };
    return {
      initialize: initialize
    };
  });

}).call(this);
